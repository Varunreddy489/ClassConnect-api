// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum JoinStatus {
  PENDING
  APPROVED
  REJECTED
}

model Admin {
  id                     Int      @id @default(autoincrement())
  name                   String
  email                  String   @unique
  password               String
  phoneNumber            String?
  collegeName            String?
  role                   Role     @default(ADMIN)
  resetPasswordToken     String?
  resetPasswordExpiresAt DateTime @default(now())
  college                College? @relation(fields: [collegeName], references: [name])
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model College {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  students     Student[]
  teachers     Teacher[]
  clubs        Club[]
  admins       Admin[]
  address      String?
  contactEmail String?
  contactPhone String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Teacher {
  id                     Int       @id @default(autoincrement())
  name                   String
  email                  String    @unique
  password               String
  facultyId              String    @unique
  phoneNumber            String?
  designation            String?
  qualification          String?
  specialization         String?
  profilePic             String?
  department             String
  role                   Role      @default(TEACHER)
  resetPasswordToken     String?
  resetPasswordExpiresAt DateTime  @default(now())
  collegeId              Int
  college                College   @relation(fields: [collegeId], references: [id])
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  Message                Message[]
}

model Student {
  id                     Int           @id @default(autoincrement())
  name                   String
  email                  String        @unique
  password               String
  phoneNumber            String?
  studentId              String        @unique
  year                   String?
  department             String?
  semester               String?
  course                 String?
  profilePic             String?
  collegeId              Int
  role                   Role          @default(STUDENT)
  college                College       @relation(fields: [collegeId], references: [id])
  resetPasswordToken     String?
  resetPasswordExpiresAt DateTime      @default(now())
  clubs                  Club[]        @relation("ClubMembership")
  createdClubs           Club[]        @relation("ClubCreator")
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  Message                Message[]
  JoinRequest            JoinRequest[]
}

model Club {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  creatorId   Int
  creator     Student         @relation("ClubCreator", fields: [creatorId], references: [id])
  members     Student[]       @relation("ClubMembership")
  messages    Conversations[] @relation("ClubMessages")
  profilePic  String?
  collegeId   Int
  college     College         @relation(fields: [collegeId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())
  JoinRequest JoinRequest[]
}

model Conversations {
  id         Int       @id @default(autoincrement())
  content    String
  senderId   Int
  senderType Role
  clubId     String
  club       Club      @relation("ClubMessages", fields: [clubId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  Message    Message[]
}

model Message {
  id             String        @id @default(cuid())
  conversationId Int
  conversation   Conversations @relation(fields: [conversationId], references: [id])
  senderId       Int
  sender         Student       @relation(fields: [senderId], references: [id])
  body           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  teacherId      Int?
  Teacher        Teacher?      @relation(fields: [teacherId], references: [id])
}

model JoinRequest {
  id        Int        @id @default(autoincrement())
  studentId Int
  student   Student    @relation(fields: [studentId], references: [id])
  clubId    String // Changed from Int to String to match the Club id type
  club      Club       @relation(fields: [clubId], references: [id])
  status    JoinStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
