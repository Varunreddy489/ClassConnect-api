generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum JoinStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Student {
  id                     Int            @id @default(autoincrement())
  name                   String
  email                  String         @unique
  password               String
  phoneNumber            String?
  studentId              String         @unique
  year                   String?
  department             String?
  semester               String?
  course                 String?
  profilePic             String?
  collegeId              Int
  role                   Role           @default(STUDENT)
  college                College        @relation(fields: [collegeId], references: [id])
  resetPasswordToken     String?
  resetPasswordExpiresAt DateTime       @default(now())
  clubs                  Club[]         @relation("ClubMembership")
  createdClubs           Club[]         @relation("ClubCreator")
  Message                Message[]
  JoinRequest            JoinRequest[]
  Notification           Notification[]
  notifications          Notification[] @relation("StudentNotifications")

  connectionsSent     Connections[] @relation("ConnectionsSent")
  connectionsReceived Connections[] @relation("ConnectionsReceived")
  connections         Student[]     @relation("AcceptedConnections")
  connectedBy         Student[]     @relation("AcceptedConnections")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Events    Events[]
}

model Events {
  id          String   @id @default(cuid())
  title       String
  description String
  profilePic  String?
  startDate   DateTime
  endDate     DateTime
  location    String

  creatorId  Int
  creator    Student @relation(fields: [creatorId], references: [id])
  department String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Connections {
  id         Int              @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     ConnectionStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  sender        Student        @relation("ConnectionsSent", fields: [senderId], references: [id])
  receiver      Student        @relation("ConnectionsReceived", fields: [receiverId], references: [id])
  notifications Notification[] @relation("NotificationToConnection") // Opposite relation field
}

model Notification {
  id            String       @id @default(cuid())
  type          String?
  content       String
  recipientId   Int?
  isRead        Boolean      @default(false)
  senderId      Int?
  clubId        String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  student       Student?     @relation("StudentNotifications", fields: [recipientId], references: [id])
  Student       Student?     @relation(fields: [studentId], references: [id])
  studentId     Int?
  joinRequestId Int?
  joinRequest   JoinRequest? @relation("NotificationToJoinRequest", fields: [joinRequestId], references: [id])
  connectionId  Int?
  connection    Connections? @relation("NotificationToConnection", fields: [connectionId], references: [id])

  club Club? @relation(fields: [clubId], references: [id])
}

model Club {
  id           String          @id @default(cuid())
  name         String          @unique
  description  String?
  creatorId    Int
  creator      Student         @relation("ClubCreator", fields: [creatorId], references: [id])
  members      Student[]       @relation("ClubMembership")
  messages     Conversations[] @relation("ClubMessages")
  profilePic   String?
  collegeId    Int
  college      College         @relation(fields: [collegeId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now())
  JoinRequest  JoinRequest[]
  Notification Notification[]
}

model Conversations {
  id         Int       @id @default(autoincrement())
  content    String
  senderId   Int
  senderType Role
  clubId     String
  club       Club      @relation("ClubMessages", fields: [clubId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  Message    Message[]
}

model Message {
  id               String        @id @default(cuid())
  conversationId   Int
  conversation     Conversations @relation(fields: [conversationId], references: [id])
  senderId         Int
  sender           Student       @relation(fields: [senderId], references: [id])
  body             String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  teacherId        Int?
  Teacher          Teacher?      @relation(fields: [teacherId], references: [id])
  fileUrl          String?
  fileType         String?
  replyToMessageId String?
  replyToMessage   Message?      @relation("ReplyTo", fields: [replyToMessageId], references: [id])
  replies          Message[]     @relation("ReplyTo")
  isSeen           Boolean       @default(false)
}

model Admin {
  id                     Int      @id @default(autoincrement())
  name                   String
  email                  String   @unique
  password               String
  phoneNumber            String?
  collegeName            String?
  role                   Role     @default(ADMIN)
  resetPasswordToken     String?
  resetPasswordExpiresAt DateTime @default(now())
  college                College? @relation(fields: [collegeName], references: [name])
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model College {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  students     Student[]
  teachers     Teacher[]
  clubs        Club[]
  admins       Admin[]
  address      String?
  contactEmail String?
  contactPhone String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Teacher {
  id                     Int       @id @default(autoincrement())
  name                   String
  email                  String    @unique
  password               String
  facultyId              String    @unique
  phoneNumber            String?
  designation            String?
  qualification          String?
  specialization         String?
  profilePic             String?
  department             String
  role                   Role      @default(TEACHER)
  resetPasswordToken     String?
  resetPasswordExpiresAt DateTime  @default(now())
  collegeId              Int
  college                College   @relation(fields: [collegeId], references: [id])
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  Message                Message[]
}

model JoinRequest {
  id            Int            @id @default(autoincrement())
  studentId     Int
  student       Student        @relation(fields: [studentId], references: [id])
  clubId        String
  club          Club           @relation(fields: [clubId], references: [id])
  status        JoinStatus     @default(PENDING)
  createdAt     DateTime       @default(now())
  notifications Notification[] @relation("NotificationToJoinRequest")
  updatedAt     DateTime       @updatedAt
}
